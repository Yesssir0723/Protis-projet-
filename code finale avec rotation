/*
Alexandre Mersch - Yassir Amazouz
14 Mars 2023
Nucleo-L476RG
Lense-2021-Robot-Holonome

Alimentation 12V max
 */



/* mbed Microcontroller Library
 * Copyright (c) 2019 ARM Limited
 * SPDX-License-Identifier: Apache-2.0
 * Version Mbed-os 6.13.0
 */

/* PROJET PROTIS ROBOT VERONICA 2023
 * Auteur du code de base : Julien VILLEMEJANE
 * Autrices du code réarrangé : Camille BASA et Aglaé BRIDONNEAU
 * Matériel utilisé : 
 * - capteur de température et d'humidité, ref : Temp&Hum 14 CLICK
 * - modules bluetooth, ref : NRF24L01
 * - carte NUCLEO-L476RG
 * Code réalisé sur la version 6.13.0 de mbed-os
 * Rôle : capte la température et l'humidité, puis l'envoie par bluetooth
 * Fonctionne avec le code "Bluetooth_et_Capteur_Recu"
 */




#include "mbed.h"
#include "math.h"
#include <string.h>
#include "TEMPHUM_14_CLICK.h"
#include "MOD24_NRF.h"

#define WAIT_TIME_MS 500 
double k=0.9; //valeur du RC maximal


//Définition des broches des capteur de vitesse
InterruptIn encoche_moteur2_1(PB_1);
InterruptIn encoche_moteur3_1(PB_10);
InterruptIn encoche_moteur2_2(PB_2);
InterruptIn encoche_moteur3_2(PB_4);


                         

// variable de vitesse des moteurs dans chaque sens
PwmOut moteur2_rot_gauche(PB_14);
PwmOut moteur2_rot_droite(PB_13);
PwmOut moteur3_rot_gauche(PB_8);
PwmOut moteur3_rot_droite(PC_9);

//DigitalOut  enablePower(PB_3);
int dist2; // nombre d'encoches pour la distance à parcourir pour le moteur 2
int dist3; //nombre d'encoches pour la distance à parcourir pour le moteur 3
int dist; // distance à parcourir à l'origine
double rc2; // rapport cyclique de M2
double rc3; // rapport cyclique de M3
int deltadist; //dist3-dist2
int angle; //angle de la rotation à réaliser à l'orogine
int rotation2; //nombre d'encoches à parcourir pour le moteur 2 en rotation
int rotation3; //nombre d'encoches à parcourir pour le moteur 3 en rotation
int rotation; // nombre d'encoches à parcourir en rotation
int rot=0; // variable de phase du système, rot=0 pour tourner et rot=1 pour avancer

//Ticker
Ticker tic;
Ticker tac;
Ticker toc;
Ticker tuc;


// Déclaration fonction
void fonction_interruption_moteur2(void);
void fonction_interruption_moteur3(void);
void fonction_interruption_rot_moteur2(void);
void fonction_interruption_rot_moteur3(void);
void asservissement_moteur3(void);
void arrivee(void);
void observation(void);
void objectif_rotation(void);



UnbufferedSerial    my_pc(USBTX, USBRX);
char        charStr[128];

// Temperature Sensor
I2C         my_sensor_i2c(PC_1, PC_0);
DigitalOut  my_sensor_reset(D9);
TempHum_14_Click    my_sensor(&my_sensor_i2c, &my_sensor_reset);
// Value from the sensor
float       temperature, humidity;
// Collected data
float       temperatureI2C;
//float       humidityI2C;
uint8_t     temperatureBytes[4];
//uint8_t     humidityBytes[4];


// RF Transmission of data
#define         TRANSFER_SIZE   8
nRF24L01P       nRF24_mod(D11, D12, D13, PA_12, PA_11, PB_12);
// MOSI, MISO, SCK, CSN, CE, IRQ
char        dataToSend[TRANSFER_SIZE] = {0};
char        dataReceived[TRANSFER_SIZE] = {0};


// Function to test conversion of data format
void        testConversion(void);
// Initialization function for the BT nRF24L01 module
//  frequency in MHz
void        initNRF24(int frequency);
// Receiving function for the BT nRF24L01 module
//  data : array of data received by the module
//  return the number of bytes received
uint8_t     receiveNRF24(char *data);
// Transmitting function for the BT nRF24L01 module
//  data : array of data to transmit
void        transmitNRF24(char *data);









int main(){
    wait_us(1e6);
    angle=180; //en degré
    rotation=(int)(angle*400.0/360.0+200); // traduit l'angle en nombre d'encoches à passer
    rotation2=rotation;
    rotation3=rotation;
    dist=1000;
    dist2=dist;
    dist3=dist;

    moteur2_rot_gauche.period_ms(1);
    moteur3_rot_droite.period_ms(1);
    moteur2_rot_gauche.write(rc2);  
    moteur3_rot_droite.write(rc3);  
    encoche_moteur2_1.rise(&fonction_interruption_moteur2);
    encoche_moteur3_1.rise(&fonction_interruption_moteur3);
    encoche_moteur2_2.rise(&fonction_interruption_moteur2);
    encoche_moteur3_2.rise(&fonction_interruption_moteur3);

    tic.attach(&asservissement_moteur3,2000us);
    toc.attach(&arrivee,50000us);
    tuc.attach(&objectif_rotation,50000us);
    tac.attach(&observation,50000us);







while(1){

 my_sensor.readTRH(&temperature, &humidity);
        sprintf(charStr, "%f degres\r\n", temperature);
        my_pc.write(charStr, strlen(charStr));

        //sprintf(charStr, "%f percent\r\n", humidity);
        //my_pc.write(charStr, strlen(charStr));
        
        my_sensor.floatToBytes(&temperature, (uint8_t *)dataToSend);
        //my_sensor.floatToBytes( (&temperature << 32) + (&humidity), (uint8_t *)dataToSend);
        transmitNRF24(dataToSend);
        uint8_t  nb_data = receiveNRF24(dataReceived);
        sprintf(charStr, "nb_data = %d\r\n", nb_data);
        my_pc.write(charStr, strlen(charStr));

        
        if(nb_data != 0){
            /*
            for(int i = 0; i < nb_data; i++){
                sprintf(charStr, "%d ", dataReceived[i]);
                my_pc.write(charStr, strlen(charStr));               
            }
            sprintf(charStr, "\r\n");
            my_pc.write(charStr, strlen(charStr));
            */
            
            //humidityI2C = my_sensor.bytesToFloat((uint8_t *)dataReceived);
            //temperatureI2C = my_sensor.bytesToFloat((uint8_t *)dataReceived&0xFFFFFFFF);
            
            temperatureI2C = my_sensor.bytesToFloat((uint8_t *)dataReceived);
            sprintf(charStr, "New Temp = %f\r\n", temperatureI2C);
            my_pc.write(charStr, strlen(charStr));

        }
        thread_sleep_for(WAIT_TIME_MS);

}
}

/* Routine d'interruption */

void fonction_interruption_moteur2()
{
  // ACTIONS A REALISER LORS DE L'ACTIVATION DE L'INTERRUPTION 2
    if (rot==1){
        dist2=dist2-1;
    }
    else {
        rotation2=rotation2-1;
    }
}



void fonction_interruption_moteur3()
{
  // ACTIONS A REALISER LORS DE L'ACTIVATION DE L'INTERRUPTION 3
    if (rot==1){
        dist3=dist3-1;
    }
    else {
        rotation3=rotation3-1;
    }
}




    //Asservissement du moteur 3 sur le moteur 2 en phase d'avancement droit
void asservissement_moteur3(){
    if (rot==1){
        deltadist=dist3-dist2;
        if (dist3<150){
            if ((deltadist>4)&& (rc3<0.95)){
                rc3=rc3+0.1;
            }
            else if ((deltadist<4) && (rc3>0.05)){
                rc3=rc3-0.05; //diminution rapide pour compenser l'inertie
            }
        }
        else{
            if ((deltadist>3)&& (rc3<k+0.15)){
                rc3=rc3+0.02;
            }
            else if ((deltadist<3) && (rc3>k-0.15)){  
                rc3=rc3-0.1;//diminution rapide pour compenser l'inertie
            }
        }
     
    moteur3_rot_droite.write(rc3);
    moteur2_rot_gauche.write(rc2);  
    }
}


// affichage des données du système, pour quantifier son évolution et permet de passer de la phase rotation à la phase avancement;
void observation(){
    
    printf("dist3=%d\r\n",dist3);
    printf("dist2=%d\r\n",dist2);
    printf("rot=%d\r\n",rot);
    printf("rc3=%lf\r\n",rc3);
    printf("rc2=%lf\r\n",rc2);
    
    if ((rotation<180)&&(rotation>-180)){
        rot=1; // passage en phase progression droite
    }

}

//Permet de faire tourner la roue gauche ou droite de la distance voulue, pour faire tourner la voiture d'un angle positif ou négatif.
void objectif_rotation(){
    if (rot==0){
        if (rotation>0){
            rc2=1+k-exp(pow((1.0-(rotation2*1.0)/(rotation*1.0)),(rotation*4/1000))*log(1+k)); //fonction étudiée pour valoir 1.8 quand on est loin de l'arrivée et diminue quand on s'approche.
            rotation=rotation2;
        }
        else{
            rc3=1+k-exp(pow((1.0-(rotation3*1.0)/(rotation*1.0)),(rotation*4/1000))*log(1+k));        
            rotation=rotation3;
        }
        moteur3_rot_droite.write(rc3);
        moteur2_rot_gauche.write(rc2);  
    }
}

//Permet de faire avancer la roue gauche de la distance voulue, une fois la rotation effectuée.
void arrivee(){
    if (rot==1){
        rc2=1+k-exp(pow((1.0-(dist2*1.0)/(dist*1.0)),(dist*4/1000))*log(1+k)); //fonction étudiée pour valoir 1.8 quand on est loin de l'arrivée et diminue quand on s'approche.
    }
}







// Function to test conversion of data format
void    testConversion(void){
    // Test for Bytes to Float and Float to Bytes conversion
    temperature = 3.36;
    sprintf(charStr, "Temp = %f\r\n", temperature);
    my_pc.write(charStr, strlen(charStr));    

    my_sensor.floatToBytes(&temperature, temperatureBytes);

    for(int i = 0; i < 4; i++){
        sprintf(charStr, "%x ", temperatureBytes[i]);
        my_pc.write(charStr, strlen(charStr));    
    }
    
    temperatureI2C = my_sensor.bytesToFloat(temperatureBytes);
    sprintf(charStr, "\r\n NewTemp = %f\r\n", temperatureI2C);
    my_pc.write(charStr, strlen(charStr)); 
    // END - Test for Bytes to Float and Float to Bytes conversion
}


// Initialization function for the BT nRF24L01 module
void initNRF24(int frequency){
    nRF24_mod.powerUp();
    wait_us(100000);
    nRF24_mod.setAirDataRate(NRF24L01P_DATARATE_250_KBPS);
    nRF24_mod.setRfFrequency(frequency);
    wait_us(1000000);

    sprintf(charStr, "nRF24L01+ Frequency    : %d MHz\r\n",  nRF24_mod.getRfFrequency());
    my_pc.write(charStr, strlen(charStr)); 
    sprintf(charStr, "nRF24L01+ Data Rate    : %d kbps\r\n", nRF24_mod.getAirDataRate());
    my_pc.write(charStr, strlen(charStr)); 

    nRF24_mod.setTransferSize( TRANSFER_SIZE );
    nRF24_mod.setReceiveMode();
    nRF24_mod.enable();
}

// Receiving function for the BT nRF24L01 module
uint8_t receiveNRF24(char *data){
    uint8_t        rxDataCnt = 0;
    if ( nRF24_mod.readable() ) {
        // Read the data into the receive buffer
        rxDataCnt = nRF24_mod.read( NRF24L01P_PIPE_P0, data, TRANSFER_SIZE);
    }
    return rxDataCnt;
}

// Transmitting function for the BT nRF24L01 module
//  data : array of data to transmit
void        transmitNRF24(char *data){    
    nRF24_mod.write( NRF24L01P_PIPE_P0, data, TRANSFER_SIZE );
}
